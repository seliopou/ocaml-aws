# OASIS_START
# DO NOT EDIT (digest: baeb590fe9d2abcb9111ca3f38cf6d32)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library aws-elasticloadbalancing
"lib/aws-elasticloadbalancing.cmxs": use_aws-elasticloadbalancing
"lib/types.cmx": for-pack(Aws-elasticloadbalancing)
"lib/errors.cmx": for-pack(Aws-elasticloadbalancing)
"lib/addTags.cmx": for-pack(Aws-elasticloadbalancing)
"lib/applySecurityGroupsToLoadBalancer.cmx": for-pack(Aws-elasticloadbalancing)
"lib/attachLoadBalancerToSubnets.cmx": for-pack(Aws-elasticloadbalancing)
"lib/configureHealthCheck.cmx": for-pack(Aws-elasticloadbalancing)
"lib/createAppCookieStickinessPolicy.cmx": for-pack(Aws-elasticloadbalancing)
"lib/createLBCookieStickinessPolicy.cmx": for-pack(Aws-elasticloadbalancing)
"lib/createLoadBalancer.cmx": for-pack(Aws-elasticloadbalancing)
"lib/createLoadBalancerListeners.cmx": for-pack(Aws-elasticloadbalancing)
"lib/createLoadBalancerPolicy.cmx": for-pack(Aws-elasticloadbalancing)
"lib/deleteLoadBalancer.cmx": for-pack(Aws-elasticloadbalancing)
"lib/deleteLoadBalancerListeners.cmx": for-pack(Aws-elasticloadbalancing)
"lib/deleteLoadBalancerPolicy.cmx": for-pack(Aws-elasticloadbalancing)
"lib/deregisterInstancesFromLoadBalancer.cmx": for-pack(Aws-elasticloadbalancing)
"lib/describeInstanceHealth.cmx": for-pack(Aws-elasticloadbalancing)
"lib/describeLoadBalancerAttributes.cmx": for-pack(Aws-elasticloadbalancing)
"lib/describeLoadBalancerPolicies.cmx": for-pack(Aws-elasticloadbalancing)
"lib/describeLoadBalancerPolicyTypes.cmx": for-pack(Aws-elasticloadbalancing)
"lib/describeLoadBalancers.cmx": for-pack(Aws-elasticloadbalancing)
"lib/describeTags.cmx": for-pack(Aws-elasticloadbalancing)
"lib/detachLoadBalancerFromSubnets.cmx": for-pack(Aws-elasticloadbalancing)
"lib/disableAvailabilityZonesForLoadBalancer.cmx": for-pack(Aws-elasticloadbalancing)
"lib/enableAvailabilityZonesForLoadBalancer.cmx": for-pack(Aws-elasticloadbalancing)
"lib/modifyLoadBalancerAttributes.cmx": for-pack(Aws-elasticloadbalancing)
"lib/registerInstancesWithLoadBalancer.cmx": for-pack(Aws-elasticloadbalancing)
"lib/removeTags.cmx": for-pack(Aws-elasticloadbalancing)
"lib/setLoadBalancerListenerSSLCertificate.cmx": for-pack(Aws-elasticloadbalancing)
"lib/setLoadBalancerPoliciesForBackendServer.cmx": for-pack(Aws-elasticloadbalancing)
"lib/setLoadBalancerPoliciesOfListener.cmx": for-pack(Aws-elasticloadbalancing)
<lib/*.ml{,i,y}>: pkg_aws
# Executable test_elb_lwt
<lib_test/test_lwt.{native,byte}>: pkg_aws
<lib_test/test_lwt.{native,byte}>: pkg_aws.lwt
<lib_test/test_lwt.{native,byte}>: pkg_aws_elasticloadbalancing
<lib_test/test_lwt.{native,byte}>: pkg_lwt.syntax
<lib_test/test_lwt.{native,byte}>: pkg_oUnit
<lib_test/test_lwt.{native,byte}>: pkg_threads
<lib_test/test_lwt.{native,byte}>: pkg_yojson
<lib_test/*.ml{,i,y}>: pkg_aws.lwt
<lib_test/*.ml{,i,y}>: pkg_lwt.syntax
# Executable test_elb_async
<lib_test/test_async.{native,byte}>: pkg_async
<lib_test/test_async.{native,byte}>: pkg_aws
<lib_test/test_async.{native,byte}>: pkg_aws.async
<lib_test/test_async.{native,byte}>: pkg_aws_elasticloadbalancing
<lib_test/test_async.{native,byte}>: pkg_oUnit
<lib_test/test_async.{native,byte}>: pkg_threads
<lib_test/test_async.{native,byte}>: pkg_yojson
<lib_test/*.ml{,i,y}>: pkg_async
<lib_test/*.ml{,i,y}>: pkg_aws
<lib_test/*.ml{,i,y}>: pkg_aws.async
<lib_test/*.ml{,i,y}>: pkg_aws_elasticloadbalancing
<lib_test/*.ml{,i,y}>: pkg_oUnit
<lib_test/*.ml{,i,y}>: pkg_threads
<lib_test/*.ml{,i,y}>: pkg_yojson
# OASIS_STOP
